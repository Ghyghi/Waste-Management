name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04, ubuntu-18.04, macos-latest, macos-10.15, windows-latest, windows-2019]
        python-version: ['3.12.3', '3.11', '3.10', '3.9']

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Print environment variables
        run: env
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Verify Python Installation
        run: |
          python --version
          which python
        shell: bash

      - name: Install system dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-18.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libmysqlclient-dev pkg-config
        shell: bash

      - name: Install MySQL client on macOS
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-10.15'
        run: |
          brew install mysql-client pkg-config
          echo 'export PATH="/usr/local/opt/mysql-client/bin:$PATH"' >> ~/.zshrc
          source ~/.zshrc
          echo 'export MYSQLCLIENT_CFLAGS=$(mysql_config --cflags)' >> $GITHUB_ENV
          echo 'export MYSQLCLIENT_LDFLAGS=$(mysql_config --libs)' >> $GITHUB_ENV
        shell: bash

      - name: Install MySQL client on Windows
        if: matrix.os == 'windows-latest' || matrix.os == 'windows-2019'
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          choco install mysql --yes
          echo 'export PATH="/c/tools/mysql/current/bin:$PATH"' >> $env:GITHUB_ENV
          Refresh-Env
        shell: powershell

      - name: Verify System Dependencies
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "ubuntu-20.04" || "${{ matrix.os }}" == "ubuntu-18.04" ]]; then
            dpkg -l | grep libmysqlclient-dev || echo "MySQL client not installed"
          elif [[ "${{ matrix.os }}" == "macos-latest" || "${{ matrix.os }}" == "macos-10.15" ]]; then
            mysql --version || echo "MySQL client not installed"
          elif [[ "${{ matrix.os }}" == "windows-latest" || "${{ matrix.os }}" == "windows-2019" ]]; then
            mysql --version || echo "MySQL client not installed"
          else
            echo "Unsupported OS: ${{ matrix.os }}"
            exit 1
          fi
        shell: bash

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up virtual environment and install dependencies
        run: |
          python -m venv venv
          if [[ "${{ matrix.os }}" == "windows-latest" || "${{ matrix.os }}" == "windows-2019" ]]; then
            .\venv\Scripts\activate
          else
            source venv/bin/activate
          fi
          pip install --upgrade pip
          pip install -r requirements.txt
        shell: bash

      - name: Verify Virtual Environment and Dependencies
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" || "${{ matrix.os }}" == "windows-2019" ]]; then
            .\venv\Scripts\python --version
            .\venv\Scripts\pip list
          else
            source venv/bin/activate
            python --version
            pip list
          fi
        shell: bash

      - name: Run tests
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" || "${{ matrix.os }}" == "windows-2019" ]]; then
            .\venv\Scripts\pytest
          else
            source venv/bin/activate
            pytest
          fi
        shell: bash
